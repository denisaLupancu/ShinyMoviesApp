library(haven)
df <- read_dta("C:/Users/Gabi/Downloads/states.dta")
states <- as_tibble(state.x77, rownames = 'State')
names(states) <- str_replace_all(names(states), ' |\\.', '_')
head(states)
class(states)
glimpse(states)
states %>%
skimr::skim()
install.packages("skimr")
library(skimr)
install.packages("skimr")
library(skimr)
states %>%
skimr::skim()
missing_vals <- states %>%
map_int(., ~ sum(is.na(.) | . == 'N/A')) %>%
tibble(variable = names(.), n_missing = .) %>%
mutate (percent_missing = round(n_missing * 100 /
nrow(states), 2))
ggplot(missing_vals,
aes (x = variable, y = n_missing, fill = variable)) +
geom_col() +
coord_flip() +
geom_text(aes(label = paste0(percent_missing, '%'), size = 3.5,
hjust = if_else(percent_missing > 3, 1.02, -0.03),
vjust = 0.5))  +
theme(legend.position="none") + # this will remove the legend
scale_y_continuous(limits = c(0,170), breaks = seq(0, 170, 20))
eda_factors <- states %>%
mutate_if(is.factor, as.character) %>%
select_if(., is.character ) %>%
mutate (id = row_number()) %>%
pivot_longer(-id, names_to = "variable", values_to = "value" ) %>%
mutate (value = coalesce(value, 'N/A')) %>%
group_by(variable, value) %>%
summarise (n_value = n()) %>%
ungroup() %>%
mutate (percent = round(n_value * 100 / nrow(states),2)) %>%
arrange(variable, value)
# plot the factors values
eda_factors %>%
group_by(variable) %>%
summarise(n_of_values = n()) %>%
#     filter (n_of_values < 20) %>%
ungroup() %>%
dplyr::select (variable) %>%
inner_join(eda_factors) %>%
ggplot(., aes(x = value, y = n_value, fill = value)) +
geom_col() +
geom_text (aes(label = paste0(round(percent,0), '%'),
vjust = if_else(n_value > 300, 1.5, -0.5))) +
facet_wrap(~ variable, scale = "free") +
theme(legend.position="none") + # this will remove the legend
theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1)) +
theme(strip.text.x = element_text(size = 14)) +
xlab("") + ylab("frequency")
ggplot(missing_vals,
aes (x = variable, y = n_missing, fill = variable)) +
geom_col() +
coord_flip() +
geom_text(aes(label = paste0(percent_missing, '%'), size = 3.5,
hjust = if_else(percent_missing > 3, 1.02, -0.03),
vjust = 0.5))  +
theme(legend.position="none") + # this will remove the legend
scale_y_continuous(limits = c(0,170), breaks = seq(0, 170, 20))
# first, compute the frequencies for each categorical variables and values
eda_factors <- states %>%
mutate_if(is.factor, as.character) %>%
select_if(., is.character ) %>%
mutate (id = row_number()) %>%
pivot_longer(-id, names_to = "variable", values_to = "value" ) %>%
mutate (value = coalesce(value, 'N/A')) %>%
group_by(variable, value) %>%
summarise (n_value = n()) %>%
ungroup() %>%
mutate (percent = round(n_value * 100 / nrow(states),2)) %>%
arrange(variable, value)
View(eda_factors)
eda_factors %>%
group_by(variable) %>%
summarise(n_of_values = n()) %>%
#     filter (n_of_values < 20) %>%
ungroup() %>%
dplyr::select (variable) %>%
inner_join(eda_factors) %>%
ggplot(., aes(x = value, y = n_value, fill = value)) +
geom_col() +
geom_text (aes(label = paste0(round(percent,0), '%'),
vjust = if_else(n_value > 300, 1.5, -0.5))) +
facet_wrap(~ variable, scale = "free") +
theme(legend.position="none") + # this will remove the legend
theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1)) +
theme(strip.text.x = element_text(size = 14)) +
xlab("") + ylab("frequency")
install.packages('corr')
library(corrr)
corrgram::corrgram(states %>% dplyr::select (-State) %>% select_if(is.numeric),
lower.panel=panel.conf, upper.panel=panel.pts,
diag.panel=panel.density)
shiny::runApp('D:/LucrareLicenta/1.ShinyApp/IMDb_Movies_App - AUTH')
auth0::use_auth0()
use_auth0()
use_auth0()
auth0::use_auth0()
runApp('D:/LucrareLicenta/1.ShinyApp/IMDb_Movies_App - AUTH')
runApp('D:/LucrareLicenta/1.ShinyApp/IMDb_Movies_App - AUTH')
getwd()
runApp('D:/LucrareLicenta/1.ShinyApp/IMDb_Movies_App - AUTH')
runApp('D:/LucrareLicenta/1.ShinyApp/IMDb_Movies_App - AUTH')
runApp('D:/LucrareLicenta/1.ShinyApp/IMDb_Movies_App - AUTH')
verbatimTextOutput("user_info"),
library(shiny)
library(auth0)
# simple UI with user info
ui <- fluidPage(
verbatimTextOutput("user_info"),
verbatimTextOutput("credential_info")
)
server <- function(input, output, session) {
# print user info
output$user_info <- renderPrint({
session$userData$auth0_info
})
output$credential_info <- renderPrint({
session$userData$auth0_credentials
})
}
shinyAppAuth0(ui, server)
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
usethis::edit_r_environ()
shiny::runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
options(shiny.port=5861)
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
auth0_ui(
fluidPage(fluidRow(plotOutput("plot")),
logoutButton())
)
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
auth0_server(function(input, output, session) {
output$plot <- renderPlot({
plot(1:10)
})
})
getwd()
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
library(auth0)
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
remotes::install_github("curso-r/auth0")
runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
install.packages("shinyauthr")
library(shiny)
library(shinyauthr)
# dataframe that holds usernames, passwords and other user data
user_base <- tibble::tibble(
user = c("user1", "user2"),
password = sapply(c("pass1", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- fluidPage(
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
# login section
shinyauthr::loginUI(id = "login"),
# Sidebar to show user info after login
uiOutput("sidebarpanel"),
# Plot to show user info after login
plotOutput("distPlot")
)
server <- function(input, output, session) {
credentials <- shinyauthr::loginServer(
id = "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init())
)
# Logout to hide
logout_init <- shinyauthr::logoutServer(
id = "logout",
active = reactive(credentials()$user_auth)
)
output$sidebarpanel <- renderUI({
# Show only when authenticated
req(credentials()$user_auth)
tagList(
# Sidebar with a slider input
column(width = 4,
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
column(width = 4,
p(paste("You have", credentials()$info[["permissions"]],"permission"))
)
)
})
# Plot
output$distPlot <- renderPlot({
# Show plot only when authenticated
req(credentials()$user_auth)
if(!is.null(input$obs)) {
hist(rnorm(input$obs))
}
})
}
shinyApp(ui = ui, server = server)
source('D:/LucrareLicenta/1.ShinyApp/login-test/2.log-in.R')
shiny::runApp('D:/LucrareLicenta/1.ShinyApp/test-app-auth')
shiny::runApp('D:/LucrareLicenta/1.ShinyApp/IMDb_Movies_App')
shiny::runApp('D:/LucrareLicenta/1.ShinyApp/IMDb_Movies_App')
shiny::runApp('D:/LucrareLicenta/1.ShinyApp/1.IMDb-final-app')
install.packages("ggstatsplot")
library(ggstatsplot)
install.packages("dplyr")
library(dplyr)
library(purrr)
library(ggplot2)
library("readr")
library("tidyverse")
library("dplyr")
library("ggplot2")
library(tibble)
library("odbc")
library("DBI")
library(patchwork)
install.packages("ggstatsplot")
library(ggstatsplot)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
update.packages("dplyr")
update.packages("dplyr")
remove.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
remove.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
update.packages("dplyr")
library(dplyr)
install.packages("ggstatsplot")
library(ggstatsplot)
library(scales)
library(dplyr)
library(purrr)
library(ggplot2)
library("readr")
library("tidyverse")
library("dplyr")
library("ggplot2")
library(tibble)
library("odbc")
library("DBI")
library(patchwork)
library(ggstatsplot)
library(scales)
setwd('D:/LucrareLicenta/BD/Final_DB/Kaggle_IMDB_Data')
load('kaggle.RData')
#tabela utilizata la analiza
complete_movies <- inner_join(movie_actors, movies_actor_titles, by = c("nconst" = "nconst")) %>%
inner_join(movies_basics, by = c("movie_id" = "tconst")) %>%
inner_join(movies_directors, by = c("movie_id" = "tconst"), relationship = "many-to-many") %>%
# inner_join(movies_producers, by = c("nconst" = "directors"), relationship = "many-to-many") %>%
# inner_join(movies_producers, by = c("nconst" = "writers"), relationship = "many-to-many") %>%
inner_join(movies_genres, by = c("movie_id" = "tconst"), relationship = "many-to-many")%>%
inner_join(movies_ratings, by = c("movie_id"= "tconst"))
##am facut analize pentru un set de 10000 de inregistrari pentru rapiditate
complete_movies_sample <- complete_movies %>%
sample_n(10000)
setwd("D:/LucrareLicenta/1.ShinyApp/1.IMDb-final-app/")
getwd()
movies_EDA <- read_csv("data/movies.csv")
glimpse(movies_EDA)
View(movies_EDA)
View(movies_EDA)
movies_EDA <- movies_EDA %>%
mutate(genre = if_else(genre == 'Music' | genre == 'Musical', 'Music', genre),
genre = if_else(genre == 'Reality-TV' | genre == 'Talk-Show', 'Reality-TV', genre),
genre = if_else(genre == 'Biography' | genre == 'Documentary', 'Documentary', genre),
genre = if_else(genre == 'Crime' | genre == 'Horror', 'Horror', genre),
genre = ifelse(tolower(genre) == 'sci-fi', 'SF', genre),
genre = if_else(genre == 'Fantasy', 'SF', genre),
genre = if_else(genre == 'Crime', 'Horror', genre),
genre = if_else(genre == 'War'| genre == 'Western', 'History', genre),
genre = if_else(genre == 'Film-Noir', 'Drama', genre),
genre = if_else(genre == 'Adult' | genre =='Game-Show' | genre=='Reality-TV' | genre=='Short' | genre=='Sport', 'Other-genre', genre),
titleType=if_else(titleType=='Short'| titleType=='tvMiniSeries' | titleType=='tvShort', 'tvMiniSeries', titleType ),
titleType=if_else(titleType=='tvMovie', 'movie', titleType ),
titleType=if_else(titleType=='videoGame', 'video', titleType ))
movies_EDA <- movies_EDA %>%
mutate(genre = if_else(genre == 'Music' | genre == 'Musical', 'Music', genre),
genre = if_else(genre == 'Reality-TV' | genre == 'Talk-Show', 'Reality-TV', genre),
genre = if_else(genre == 'Biography' | genre == 'Documentary', 'Documentary', genre),
genre = if_else(genre == 'Crime' | genre == 'Horror', 'Horror', genre),
genre = ifelse(tolower(genre) == 'sci-fi', 'SF', genre),
genre = if_else(genre == 'Fantasy', 'SF', genre),
genre = if_else(genre == 'Crime', 'Horror', genre),
genre = if_else(genre == 'War'| genre == 'Western', 'History', genre),
genre = if_else(genre == 'Film-Noir', 'Drama', genre),
genre = if_else(genre == 'Adult' | genre =='Game-Show' | genre=='Reality-TV' | genre=='Short' | genre=='Sport', 'Other-genre', genre))
shapiro.test(sample( movies_EDA$score, 5000))
# non-parametric correlation coefficient
ggscatterstats(
data = movies_EDA,
x = budget,
y = score,
type = "np"
)
ggbetweenstats(
data = movies_EDA,
x = genre,
y = score,
plot.type = "boxviolin",
type = "np"
)
#####################
lm1<- lm(score ~ budget+runtime + genre + factor(year),data=movies_EDA)
summary(lm1)
ggplot(missing_vals,
aes (x = variable, y = n_missing, fill = variable)) +
geom_col() +
coord_flip() +
geom_text(aes(label = paste0(percent_missing, '%'),
hjust = if_else(percent_missing > 3, 1.02, -0.03),
vjust = 0.5), size = 4 ) +
theme(legend.position="none") + # this will remove the legend
scale_y_continuous(limits = c(0,170), breaks = seq(0, 150, 10))
missing_vals <- sample_movies %>%
map_int(., ~ sum(is.na(.) | . == 'N/A')) %>%
tibble(variable = names(.), n_missing = .) %>%
mutate (percent_missing = round(n_missing * 100 /
nrow(sample_movies), 2))
##Comasare date Versiunea 2
df <- complete_movies_sample %>%
mutate(genre = case_when(
genre %in% c('Music', 'Musical') ~ 'Music',
genre %in% c('Reality-TV', 'Talk-Show', 'News') ~ 'Reality-TV',
genre %in% c('Biography', 'Documentary') ~ 'Documentary',
genre %in% c('Fantasy', 'Sci-fi') ~ 'SF',
genre %in% c('Crime', 'Horror') ~ 'Horror',
genre %in% c('War', 'Western', 'History') ~ 'History',
genre %in% c('Film-Noir', 'Drama') ~ 'Drama',
TRUE ~ genre
))
mutate(genre = if_else(genre == 'Music' | genre == 'Musical', 'Music', genre),
genre = if_else(genre == 'Reality-TV' | genre == 'Talk-Show', 'Reality-TV', genre),
genre = if_else(genre == 'Biography' | genre == 'Documentary', 'Documentary', genre),
genre = if_else(genre == 'Crime' | genre == 'Horror', 'Horror', genre),
genre = ifelse(tolower(genre) == 'sci-fi', 'SF', genre),
genre = if_else(genre == 'Fantasy', 'SF', genre),
genre = if_else(genre == 'Crime', 'Horror', genre),
genre = if_else(genre == 'War'| genre == 'Western', 'History', genre),
genre = if_else(genre == 'Film-Noir', 'Drama', genre),
genre = if_else(genre == 'Adult' | genre =='Game-Show' | genre=='Reality-TV' | genre=='Short' | genre=='Sport', 'Other-genre', genre),
titleType=if_else(titleType=='Short'| titleType=='tvMiniSeries' | titleType=='tvShort', 'tvMiniSeries', titleType ),
titleType=if_else(titleType=='tvMovie', 'movie', titleType ),
titleType=if_else(titleType=='videoGame', 'video', titleType ))
missing_vals <- sample_movies %>%
map_int(., ~ sum(is.na(.) | . == 'N/A')) %>%
tibble(variable = names(.), n_missing = .) %>%
mutate (percent_missing = round(n_missing * 100 /
nrow(sample_movies), 2))
complete_movies_sample <- complete_movies %>%
sample_n(10000)
missing_vals <- sample_movies %>%
map_int(., ~ sum(is.na(.) | . == 'N/A')) %>%
tibble(variable = names(.), n_missing = .) %>%
mutate (percent_missing = round(n_missing * 100 /
nrow(sample_movies), 2))
##am facut analize pentru un set de 10000 de inregistrari pentru rapiditate
complete_movies_sample <- complete_movies %>%
sample_n(10000)
sample_movies <- complete_movies_sample %>%
mutate(genre = if_else(genre == 'Music' | genre == 'Musical', 'Music', genre),
genre = if_else(genre == 'Reality-TV' | genre == 'Talk-Show', 'Reality-TV', genre),
genre = if_else(genre == 'Biography' | genre == 'Documentary', 'Documentary', genre),
genre = if_else(genre == 'Crime' | genre == 'Horror', 'Horror', genre),
genre = ifelse(tolower(genre) == 'sci-fi', 'SF', genre),
genre = if_else(genre == 'Fantasy', 'SF', genre),
genre = if_else(genre == 'Crime', 'Horror', genre),
genre = if_else(genre == 'War'| genre == 'Western', 'History', genre),
genre = if_else(genre == 'Film-Noir', 'Drama', genre),
genre = if_else(genre == 'Adult' | genre =='Game-Show' | genre=='Reality-TV' | genre=='Short' | genre=='Sport', 'Other-genre', genre),
titleType=if_else(titleType=='Short'| titleType=='tvMiniSeries' | titleType=='tvShort', 'tvMiniSeries', titleType ),
titleType=if_else(titleType=='tvMovie', 'movie', titleType ),
titleType=if_else(titleType=='videoGame', 'video', titleType ))
##Identificarea valorilor nule
missing_vals <- sample_movies %>%
map_int(., ~ sum(is.na(.) | . == 'N/A')) %>%
tibble(variable = names(.), n_missing = .) %>%
mutate (percent_missing = round(n_missing * 100 /
nrow(sample_movies), 2))
ggplot(missing_vals,
aes (x = variable, y = n_missing, fill = variable)) +
geom_col() +
coord_flip() +
geom_text(aes(label = paste0(percent_missing, '%'),
hjust = if_else(percent_missing > 3, 1.02, -0.03),
vjust = 0.5), size = 4 ) +
theme(legend.position="none") + # this will remove the legend
scale_y_continuous(limits = c(0,170), breaks = seq(0, 150, 10))
# first, compute the frequencies for each categorical variables and values
eda_factors <- sample_movies %>%
select(-nconst, -primaryName, -knownForTitles, -movie_id, director_id)%>%
mutate_if(is.factor, as.character) %>%
select_if(., is.character ) %>%
mutate (id = row_number()) %>%
pivot_longer(-id, names_to = "variable", values_to = "value" ) %>%
mutate (value = coalesce(value, 'N/A')) %>%
group_by(variable, value) %>%
summarise (n_value = n()) %>%
ungroup() %>%
mutate (percent = round(n_value * 100 / nrow(sample_movies),2)) %>%
arrange(variable, value)
# plot only the factors with less than 20 distinct values
eda_factors %>%
group_by(variable) %>%
summarise(n_of_values = n()) %>%
filter (n_of_values <= 50) %>%    ####### !!!!!!!
ungroup() %>%
select (variable) %>%
inner_join(eda_factors) %>%
ggplot(., aes(x = value, y = n_value, fill = value)) +
geom_col() +
geom_text (aes(label = paste0(round(percent,0), '%'),
vjust = if_else(n_value > 500, 1.5, -0.5)), size = 3) +
facet_wrap(~ variable, scale = "free") +
theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1)) +
theme(strip.text.x = element_text(size = 13)) +
xlab("") + ylab("frequency") +
theme(legend.position = 'none')
ggbetweenstats(
data = movies_EDA,
x = genre,
y = score,
plot.type = "boxviolin",
type = "np"
)
shapiro.test(sample( movies_EDA$score, 5000))
shapiro.test(sample( movies_EDA$score, 5000))
ggscatterstats(
data = movies_EDA,
x = budget,
y = score,
type = "np"
)
ggbetweenstats(
data = movies_EDA,
x = genre,
y = score,
plot.type = "boxviolin",
type = "np"
)
ggbetweenstats(
data = movies_EDA,
x = genre,
y = score,
plot.type = "boxviolin",
type = "np"
)
ggscatterstats(
data = movies_EDA,
x = budget,
y = score,
type = "np"
)
ggbetweenstats(
data = movies_EDA,
x = genre,
y = score,
plot.type = "boxviolin",
type = "np"
)
p_value <- result$p.value
result <- kruskal.test(score ~ genre, data = movies_EDA)
p_value <- result$p.value
print(p_value)
shapiro.test(sample( movies_EDA$score, 5000))
shapiro.test(sample( movies_EDA$genre, 5000))
shapiro.test(sample( movies_EDA$score, 5000))
ggbetweenstats(
data = movies_EDA,
x = genre,
y = score,
plot.type = "boxviolin",
type = "np"
)
